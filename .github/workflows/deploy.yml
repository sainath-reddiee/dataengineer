name: Build and Deploy to Hostinger

on:
  push:
    branches: [main]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_sitemap:
        description: 'Force regenerate sitemap'
        required: false
        type: boolean
        default: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: 📦 Install Dependencies
        run: npm ci
      
      - name: 🗺️ Generate Sitemap
        run: |
          if [ "${{ github.event.inputs.force_sitemap }}" == "true" ]; then
            npm run sitemap:generate:force
          else
            npm run sitemap:generate
          fi
      
      - name: ✅ Validate Sitemap
        run: npm run sitemap:validate
      
      - name: 🔑 Generate IndexNow Key (Pre-deployment)
        run: |
          echo "🔑 Ensuring IndexNow key exists..."
          node -e "
          const fs = require('fs');
          const path = require('path');
          const crypto = require('crypto');
          
          const publicDir = path.join(process.cwd(), 'public');
          const keyFile = path.join(publicDir, 'indexnow-key.txt');
          
          if (!fs.existsSync(publicDir)) {
            fs.mkdirSync(publicDir, { recursive: true });
          }
          
          if (fs.existsSync(keyFile)) {
            const key = fs.readFileSync(keyFile, 'utf8').trim();
            console.log('✅ Using existing key:', key);
          } else {
            const key = crypto.randomBytes(16).toString('hex');
            fs.writeFileSync(keyFile, key, 'utf8');
            const verificationFile = path.join(publicDir, \`\${key}.txt\`);
            fs.writeFileSync(verificationFile, key, 'utf8');
            console.log('🔑 Generated new key:', key);
            console.log('✅ Created verification file:', \`\${key}.txt\`);
          }
          "
      
      - name: 🏗️ Build Application
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: 🔍 Verify Build & Copy Files
        run: |
          echo "📊 Checking build output..."
          
          if [ ! -d "dist" ]; then
            echo "❌ dist directory not found!"
            exit 1
          fi
          
          # Copy sitemap
          if [ -f "public/sitemap.xml" ]; then
            cp public/sitemap.xml dist/
            echo "✅ Copied sitemap.xml"
          fi
          
          # Copy robots.txt
          if [ -f "public/robots.txt" ]; then
            cp public/robots.txt dist/
            echo "✅ Copied robots.txt"
          fi
          
          # Copy ALL .txt files from public (includes IndexNow verification)
          echo ""
          echo "📝 Copying all .txt files from public/..."
          TXT_COUNT=0
          for txtfile in public/*.txt; do
            if [ -f "$txtfile" ]; then
              cp "$txtfile" dist/
              echo "✅ Copied $(basename $txtfile)"
              TXT_COUNT=$((TXT_COUNT + 1))
            fi
          done
          
          if [ $TXT_COUNT -eq 0 ]; then
            echo "⚠️  No .txt files found"
          else
            echo "✅ Copied $TXT_COUNT .txt files"
          fi
          
          echo ""
          echo "✅ Build verification passed"
          echo ""
          echo "📁 .txt files in dist/:"
          ls -lh dist/*.txt 2>/dev/null || echo "  (none yet)"
          echo ""
          echo "📊 Sample of dist/ contents:"
          ls -lha dist/ | head -20
      
      - name: 🚀 Deploy to Hostinger
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: ${{ secrets.FTP_PORT }}
          local-dir: ./dist/
          server-dir: ${{ secrets.FTP_REMOTE_PATH }}/
          dangerous-clean-slate: false
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/.env
      
      - name: ⏸️ Wait for FTP Sync
        run: |
          echo "⏳ Waiting 30 seconds for FTP files to sync..."
          sleep 30
      
      - name: 🔍 Verify Deployment
        run: |
          echo "🌐 Checking if files are accessible..."
          echo ""
          
          # Check sitemap
          SITEMAP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://dataengineerhub.blog/sitemap.xml || echo "000")
          if [ "$SITEMAP_CODE" = "200" ]; then
            echo "✅ Sitemap: HTTP $SITEMAP_CODE"
          else
            echo "⚠️  Sitemap: HTTP $SITEMAP_CODE"
          fi
          
          # Check robots.txt
          ROBOTS_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://dataengineerhub.blog/robots.txt || echo "000")
          if [ "$ROBOTS_CODE" = "200" ]; then
            echo "✅ Robots.txt: HTTP $ROBOTS_CODE"
          else
            echo "⚠️  Robots.txt: HTTP $ROBOTS_CODE"
          fi
          
          # Check IndexNow key files
          if [ -f "public/indexnow-key.txt" ]; then
            KEY=$(cat public/indexnow-key.txt | tr -d '[:space:]')
            echo ""
            echo "🔑 IndexNow Key: $KEY"
            
            # Check key file
            KEY_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://dataengineerhub.blog/indexnow-key.txt" || echo "000")
            if [ "$KEY_CODE" = "200" ]; then
              echo "✅ indexnow-key.txt: HTTP $KEY_CODE"
            else
              echo "⚠️  indexnow-key.txt: HTTP $KEY_CODE"
            fi
            
            # Check verification file (the important one!)
            VERIFY_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://dataengineerhub.blog/${KEY}.txt" || echo "000")
            if [ "$VERIFY_CODE" = "200" ]; then
              echo "✅ ${KEY}.txt (verification): HTTP $VERIFY_CODE"
              echo "🎉 IndexNow setup is complete!"
            else
              echo "❌ ${KEY}.txt (verification): HTTP $VERIFY_CODE"
              echo "⚠️  This file is required for IndexNow to work!"
            fi
          else
            echo "⚠️  IndexNow key not found (will be generated on first notification)"
          fi
      
      - name: 📢 Notify Search Engines
        run: |
          echo "📡 Notifying search engines..."
          npm run sitemap:notify || echo "⚠️ Notification skipped or failed (will retry on next deployment)"
        continue-on-error: true
      
      - name: 📊 Summary
        run: |
          echo "## 🚀 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Built and deployed to Hostinger" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 [Live Site](https://dataengineerhub.blog)" >> $GITHUB_STEP_SUMMARY
          echo "- 🗺️ [Sitemap](https://dataengineerhub.blog/sitemap.xml)" >> $GITHUB_STEP_SUMMARY
          echo "- 🤖 [Robots.txt](https://dataengineerhub.blog/robots.txt)" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "public/indexnow-key.txt" ]; then
            KEY=$(cat public/indexnow-key.txt | tr -d '[:space:]')
            echo "- 🔑 [IndexNow Key](https://dataengineerhub.blog/${KEY}.txt)" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: 💾 Upload Sitemap Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sitemap-${{ github.run_number }}
          path: dist/sitemap.xml
          retention-days: 30

  validate-sitemap:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: 📦 Install Dependencies
        run: npm ci
      
      - name: 🗺️ Test Sitemap Generation
        run: npm run sitemap:generate
      
      - name: ✅ Validate Sitemap
        run: npm run sitemap:validate
      
      - name: 🏗️ Test Build
        run: npm run build
      
      - name: 💬 Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('public/sitemap.xml')) {
              const content = fs.readFileSync('public/sitemap.xml', 'utf8');
              const urlCount = (content.match(/<url>/g) || []).length;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `✅ Sitemap validation passed!\n\n📊 URLs: ${urlCount}`
              });
            }
