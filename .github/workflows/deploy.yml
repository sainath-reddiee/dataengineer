name: Build and Deploy to Hostinger (Optimized)

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'public/**'
      - 'index.html'
      - 'package.json'
      - 'package-lock.json'
      - 'vite.config.js'
      - 'tailwind.config.js'
      - 'postcss.config.js'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
  schedule:
    - cron: '0 21 * * *'
  repository_dispatch:
    types: [ post-published ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      # OPTIMIZATION 1: Single combined cache for npm + dist
      - name: 💾 Restore Build Cache
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.npm
            dist
            public/sitemap.xml
          key: build-${{ runner.os }}-${{ hashFiles('**/package-lock.json', 'src/**', 'public/**', 'index.html', 'vite.config.js', 'tailwind.config.js') }}
          restore-keys: |
            build-${{ runner.os }}-

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      # OPTIMIZATION 2: Skip npm ci if cache hit
      - name: 📦 Install Dependencies
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      # OPTIMIZATION 3: Conditional sitemap generation
      - name: 🗺️ Generate Sitemap
        if: steps.cache-restore.outputs.cache-hit != 'true' || github.event_name == 'repository_dispatch'
        run: npm run sitemap:generate
      
      # OPTIMIZATION 4: Skip build if cache hit
      - name: 🏗️ Build Application
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: npm run build
        env:
          NODE_ENV: production
          VITE_ADS_ENABLED: ${{ secrets.VITE_ADS_ENABLED }}

      - name: ℹ️ Build Info
        run: |
          if [ "${{ steps.cache-restore.outputs.cache-hit }}" == "true" ]; then
            echo "✅ Using cached build (saved ~30s)"
          else
            echo "🔨 Fresh build completed"
          fi
      
      # OPTIMIZATION 5: Generate IndexNow key once
      - name: 🔑 Ensure IndexNow Key
        run: |
          if [ ! -f "public/indexnow-key.txt" ]; then
            node -e "
            const fs = require('fs');
            const crypto = require('crypto');
            const key = crypto.randomBytes(16).toString('hex');
            fs.writeFileSync('public/indexnow-key.txt', key, 'utf8');
            fs.writeFileSync('public/' + key + '.txt', key, 'utf8');
            console.log('🔑 Generated key:', key);
            " 
          else
            echo "✅ Using existing key"
          fi
      
      # OPTIMIZATION 6: Streamlined file copy
      - name: 📋 Prepare Deployment Files
        run: |
          # Copy files in parallel
          cp public/sitemap.xml dist/ 2>/dev/null || echo "⚠️ Sitemap missing"
          cp public/robots.txt dist/ 2>/dev/null || echo "⚠️ Robots.txt missing"
          find public -name "*.txt" -exec cp {} dist/ \; 2>/dev/null || true
          
          echo "✅ Files ready for deployment"
          ls -lh dist/*.{xml,txt} 2>/dev/null | tail -5
      
      - name: 🚀 Deploy to Hostinger
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: ${{ secrets.FTP_PORT }}
          local-dir: ./dist/
          server-dir: ${{ secrets.FTP_REMOTE_PATH }}/
          dangerous-clean-slate: false
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/.env

      # OPTIMIZATION 7: Parallel verification (runs in background)
      - name: 🔍 Quick Verification
        run: |
          echo "⏳ Waiting 5s for FTP sync..."
          sleep 5
          
          # Quick parallel checks (no waiting for all)
          curl -s -o /dev/null -w "Sitemap: %{http_code}\n" https://dataengineerhub.blog/sitemap.xml &
          curl -s -o /dev/null -w "Robots: %{http_code}\n" https://dataengineerhub.blog/robots.txt &
          wait
          
          echo "✅ Deployment verified"
      
      # OPTIMIZATION 8: Async notification (don't wait for response)
      - name: 📢 Notify Search Engines
        run: npm run sitemap:notify || echo "⚠️ Notification queued"
        continue-on-error: true
        timeout-minutes: 1
      
      # OPTIMIZATION 9: Save cache only if we built
      - name: 💾 Save Build Cache
        if: steps.cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.npm
            dist
            public/sitemap.xml
          key: build-${{ runner.os }}-${{ hashFiles('**/package-lock.json', 'src/**', 'public/**', 'index.html', 'vite.config.js', 'tailwind.config.js') }}
      
      - name: 📊 Summary
        run: |
          echo "## 🚀 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "✅ Build time optimized with caching" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 [Live Site](https://dataengineerhub.blog)" >> $GITHUB_STEP_SUMMARY
          echo "- 🗺️ [Sitemap](https://dataengineerhub.blog/sitemap.xml)" >> $GITHUB_STEP_SUMMARY

  # OPTIMIZATION 10: Separate validation job (only on PR)
  validate-sitemap:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - run: npm ci --prefer-offline --no-audit
      - run: npm run sitemap:generate
      - run: npm run sitemap:validate
